import org.apache.commons.codec.digest.DigestUtils

/*
 * Copyright 2020, Seqera Labs
 * Copyright 2013-2019, Centre for Genomic Regulation (CRG)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'commons-codec:commons-codec:1.10'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'application'

version = file('VERSION').text.trim()
group = 'io.nextflow'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main.java.srcDirs = []
    main.groovy.srcDirs = ['src/main']
    main.resources.srcDirs = ['src/resources']
    // this is required due to this IDEA bug
    // https://youtrack.jetbrains.com/issue/IDEA-129282
    main.output.resourcesDir = 'build/classes/main'
    test.groovy.srcDirs = ['src/test']
    test.java.srcDirs = []
    test.resources.srcDirs = []
}

idea {
    module.inheritOutputDirs = true
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repo.eclipse.org/content/groups/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

configurations {
    // see https://docs.gradle.org/4.1/userguide/dependency_management.html#sub:exclude_transitive_dependencies
    all*.exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    all*.exclude group: 'org.codehaus.groovy', module: 'groovy-cli-picocli'
    // groovydoc libs
    groovyDoc.extendsFrom runtime
    runtimeClasspath.exclude group: 'org.slf4j', module: 'slf4j-api'

    launchRuntime
}

dependencies {
    compileOnly 'io.nextflow:nextflow:22.09.5-edge'
    compileOnly 'org.slf4j:slf4j-api:1.7.10'
    compileOnly "org.codehaus.groovy:groovy:3.0.9"
    compileOnly "org.codehaus.groovy:groovy-nio:3.0.9"
    compileOnly 'org.pf4j:pf4j:3.4.1'

    launchRuntime 'io.nextflow:nextflow:22.09.5-edge'
    launchRuntime 'org.slf4j:slf4j-api:1.7.10'
    launchRuntime "org.codehaus.groovy:groovy:3.0.9"
    launchRuntime "org.codehaus.groovy:groovy-nio:3.0.9"
    launchRuntime 'org.pf4j:pf4j:3.4.1'

    compile ('org.apache.ignite:ignite-core:2.4.0')
    compile ('org.apache.ignite:ignite-slf4j:2.4.0') { transitive = false }

    testImplementation 'io.nextflow:nextflow:22.09.5-edge'
    testImplementation "org.codehaus.groovy:groovy:3.0.9"
    testImplementation "org.codehaus.groovy:groovy-nio:3.0.9"
    testCompile ("org.codehaus.groovy:groovy-test:3.0.9") { exclude group: 'org.codehaus.groovy' }
    testCompile ("cglib:cglib-nodep:3.3.0")
    testCompile ("org.objenesis:objenesis:3.1")
    testCompile ("org.spockframework:spock-core:2.0-M3-groovy-3.0") { exclude group: 'org.codehaus.groovy'; exclude group: 'net.bytebuddy' }
    testCompile ('org.spockframework:spock-junit4:2.0-M3-groovy-3.0') { exclude group: 'org.codehaus.groovy'; exclude group: 'net.bytebuddy' }
    testCompile 'com.google.jimfs:jimfs:1.1'

    /* testCompile inherited from top gradle build file */
    testCompile ('org.apache.ignite:ignite-spring:2.4.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    modules {
        module("commons-logging:commons-logging") { replacedBy("org.slf4j:jcl-over-slf4j") }
    }

    // Documentation required libraries
    groovyDoc 'org.fusesource.jansi:jansi:1.11'
    groovyDoc "org.codehaus.groovy:groovy-groovydoc:3.0.9"
    groovyDoc "org.codehaus.groovy:groovy-ant:3.0.9"
}


/*
 * launcg nextflow for testing purpose 
 */
task launch(type: JavaExec) {
    main = 'nextflow.cli.Launcher'
    classpath configurations.launchRuntime
    environment 'NXF_ANSI_LOG', 'false'
    environment 'NXF_PLUGINS_MODE', 'prod'
    environment 'NXF_PLUGINS_DIR', "$buildDir/plugins"
    //jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8010'
}

// ---=== Plugin management ===---

ext.pluginsDir = "$project.buildDir.path/plugins"
ext.plugins_s3_url = 's3://www.nextflow.io/plugins'
ext.plugins_http_url = 'http://www.nextflow.io.s3-website-eu-west-1.amazonaws.com/plugins'
ext.plugins_index_url = 'https://raw.githubusercontent.com/nextflow-io/plugins/main/plugins.json'

String computeSha512(File file) {
    if( !file.exists() )
        throw new GradleException("Missing file: $file -- cannot compute SHA-512")
    return DigestUtils.sha512Hex(file.bytes)
}

String now() {
    "${java.time.OffsetDateTime.now().format(java.time.format.DateTimeFormatter.ISO_DATE_TIME)}"
}

def timestamp = now()

task plugin(type: Jar) {
    into('classes') {
        with jar
    }
    into('lib') {
        from configurations.compile
    }
    manifest.from file('src/resources/META-INF/MANIFEST.MF')
    archiveExtension = 'zip'
    preserveFileTimestamps = false
    reproducibleFileOrder = true

    doLast {
        // create the meta file
        final zip = new File("$buildDir/libs/${project.name}-${project.version}.zip")
        final meta = new File("$buildDir/libs/${project.name}-${project.version}.json")
        meta.text = """\
              {
                "version": "${project.version}",
                "date": "${timestamp}",
                "url": "$plugins_http_url/${project.name}/${project.name}-${project.version}.zip",
                "sha512sum": "${computeSha512(zip)}"
              }
            """.stripIndent()
    }
}

task assemblePlugin(type: Copy) {
    from plugin
    into "$buildDir/plugins"
}

task targetLibs(type: Sync) {
    from configurations.compile
    into "$buildDir/target/libs"
}

assemble.dependsOn assemblePlugin
compileGroovy.dependsOn targetLibs
